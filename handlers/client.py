from config import dp, bot, ADMINS
from aiogram import types, Dispatcher
import random
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from parser.parser_wheel import parser
from database.bot_db import sql_command_random, sql_command_all
from keyboards.clien_kb import direction_markup


async def pin_message(message: types.Message):
    if message.reply_to_message:
        await bot.pin_chat_message(message.chat.id, message.reply_to_message.message_id)
    else:
        await message.answer('—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º')


async def dice_game(message: types.Message):
    bot_dice = await bot.send_dice(message.chat.id)
    user_dice = await bot.send_dice(message.chat.id)
    await message.answer("–ø–µ—Ä–≤—ã–π –∏–≥—Ä–∞–ª—å–Ω—ã–π –∫–æ—Å—Ç—å –±–æ—Ç–∞ –∞ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫–∞")
    if bot_dice.dice.value > user_dice.dice.value:
        await message.answer(f"–ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª {message.from_user.full_name}!")
    elif bot_dice.dice.value == user_dice.dice.value:
        await message.answer("–ù–∏—á—å—è")
    else:
        await message.answer(f"{message.from_user.full_name} –≤—ã–∏–≥—Ä–∞–ª –±–æ—Ç–∞!")


async def game(message: types.Message):
    if message.from_user.id in ADMINS:
        data = ['‚öΩ', 'üèÄ', 'üéØ', 'üé∞', 'üé≥', 'üé≤']
        r = random.choice(data)
        await bot.send_dice(message.chat.id, emoji=r)
    else:
        await bot.send_message(message.chat.id, '–¢—ã –Ω–µ –∞–¥–º–∏–Ω')


async def start_command(message: types.Message):
    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.username}\n"
                         f"–•–æ—á–µ—à—å –º–µ–º—ã –Ω–∞–∂–º–∏ /mem\n"
                         f"–•–æ—á–µ—à—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –Ω–∞–∂–º–∏ /quiz\n"
                         f"–•–æ—á–µ—à—å –ø–æ—Å–ª—É—à–∞—Ç—å –º—É–∑—ã–∫—É –Ω–∞–∂–º–∏ /music\n"
                         f"–•–æ—á–µ—à—å –≤–æ–∑–≤–µ—Å—Ç–∏ –∫–∞–∫–æ–µ-—Ç–æ —á–∏—Å–ª–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —ç—Ç–æ —á–∏—Å–ª–æ\n"
                         f"–ú–∏–Ω–∏-–∏–≥—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤/game\n"
                         f"–•–æ—á–µ—à—å –ø–æ–∫–∏–¥–∞—Ç—å –∫–æ—Å—Ç–∏ —Å –±–æ—Ç–æ–º –Ω–∞–∂–º–∏ /dice")


async def music(message: types.Message):
    audios = (
        'media/AUD-20220103-WA0018.mp3',
        'media/Bakr - –≠—Ç–∞–ª–æ–Ω –ö—Ä–∞—Å–æ—Ç—ã.mp3',
        'media/mende kanday kyne bar_ speed up.mp3',
        'media/Sharara sharara rmx_Ô∏è.mp3',
        'media/Xcho_Eskizy.mp3',
        'media/Xcho_Malaya.mp3',
        'media/–î–∞–º–∞ –±–æ—Å–∏–∫–æ–º –Ω–∞ –±–µ—Ä–µ–≥—É .mp3',
        'media/–ú—É—Ä–∞—à–∫–∏ - V X V PRiNCE.mp3',
    )
    audio = open(random.choice(audios), 'rb')
    await bot.send_audio(message.from_user.id, audio=audio)


async def mem(message: types.Message):
    photos = (
        'media/mem1.jpg',
        'media/mem2.jpg',
        'media/mem3.jpg',
        'media/mem4.jpg',
        'media/mem5.jpg',
        'media/mem6.jpg',
    )
    photo = open(random.choice(photos), 'rb')
    await bot.send_photo(message.from_user.id, photo=photo)


async def quiz1(message: types.Message):
    markup = InlineKeyboardMarkup()
    button_call1 = InlineKeyboardButton("–î–∞–ª—å—à–µ", callback_data='button_call1')
    markup.add(button_call1)
    question = "–ö–∞–∫ –∑–æ–≤—É—Ç —Å—É–ø–µ—Ä–º–µ–Ω–∞?"
    answers = [
        "–í–ª–∞–¥–∏–º–∏—Ä",
        "–ë—Ä—é—Å –í–µ–π–Ω",
        "–ö–∞–ª—ç–ª",
        "–ß–∞–∫ –ù–æ—Ä–∏—Å"]
    await bot.send_poll(
        chat_id=message.from_user.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=2,
        open_period=10,
        reply_markup=markup)


async def get_random_user(message: types.Message):
    # await message.answer("–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ?", reply_markup=direction_markup)
    await sql_command_random(message)


async def parsser_wheels(message: types.Message):
    items = parser()
    for item in items:
        await bot.send_message(
            message.from_user.id,

            f"{item['link']}"
            f"{item['logo']}\n"
            f"# {item['size']}\n"
            f"—Ü–µ–Ω–∞ - {item['price']}\n"
            )



async def get_all_mentor(message: types.Message):
    await sql_command_all()


def register_client_handler(dp: Dispatcher):
    dp.register_message_handler(quiz1, commands=["quiz"])
    dp.register_message_handler(mem, commands=["mem"])
    dp.register_message_handler(music, commands=["music"])
    dp.register_message_handler(start_command, commands=["start"])
    dp.register_message_handler(pin_message, commands=["pin"], commands_prefix='!')
    dp.register_message_handler(game, commands=["game"])
    dp.register_message_handler(dice_game, commands=["dice"])
    dp.register_message_handler(get_random_user, commands=["getmentor"])
    dp.register_message_handler(get_all_mentor, commands=["allmentor"])
    dp.register_message_handler(parsser_wheels, commands=["wheel"])
